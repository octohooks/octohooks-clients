# Octohooks.Example

## Introduction

In this example, we have an .NET Core API with an endpoint for sending an SMS. This endpoint is used by many of our clients and they have been requesting webhook capabilities so that they can be notified when the SMS has been sent and delivered.

We'll be making use of Octohooks add webhook capabilities to our API. The recommened architechture is as follow. We'll create an application for each of our clients in Octohooks and each application/client will therefor be able to specify one or more endpoint to which events/messages should be delivered to.

![Octohooks](Assets/Octohooks.png)

## Install

Install the library

```bash
dotnet add package Octohooks.net
```

## Configure

Configure the Octhooks Client

```csharp
builder.Services
    .AddTransient((serviceProvider) => new OctohooksClient("AUTH_TOKEN"));
```

## Implement

````csharp
[HttpPost]
public async Task<IActionResult> Post(MessagesPostRequest request)
{
    // Your application ID is either the ID assigned by the system or a custom ID chosen by you.
    // Creating an application for each user is advisable, and acquiring the application ID can be done through the Auth Token, JWT, headers, or a personalized approach.
    var applicationId = GetApplicationIdFromToken();

    // Here you can implement your own logic. For instance, we are sending an SMS in this example.
    var message = await _messageService.SendSms(request.MobileNumber, request.Body);

    // Making a request to Octohooks
    await _octohooksClient.Message.Create(applicationId, new MessageRequest
    {
        Channels = new string[] { },
        EventType = "message.sent",
        Payload = message,
        Uid = message.Id.ToString(),
    });

    return Accepted();
}
```
